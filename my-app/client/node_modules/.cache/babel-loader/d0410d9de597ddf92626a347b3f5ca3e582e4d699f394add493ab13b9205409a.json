{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elgratio\\\\Documents\\\\Learning\\\\Front End - Web Dev\\\\Projects\\\\React App Test\\\\my-app\\\\src\\\\components\\\\var-table-row-data.js\",\n  _s = $RefreshSig$();\nimport { useRef } from \"react\";\n// import Form from \"react-bootstrap/Form\";\nimport CustomToggle from \"./toggle-custom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction VarTableRowData({\n  incomingKey,\n  incomingValues,\n  tableDataType,\n  incomingchangedValues,\n  incomingHandleVariableChanges,\n  incomingCustomColorText,\n  incomingCustomBGColorText = \"transparent\"\n}) {\n  _s();\n  const editableRef = useRef();\n  const TableRowFormatRef = {\n    VarName: {\n      type: () => \"text\",\n      placeholder: () => \"Input String as a Var Name \"\n    },\n    VarStartValue: {\n      type: () => {\n        switch (incomingValues.type) {\n          case \"Integer\":\n            return \"number\";\n          case \"Date\":\n            return \"date\";\n          case \"List\":\n            return \"text\";\n          default:\n            return \"text\";\n        }\n      },\n      placeholder: () => {\n        switch (incomingValues.type) {\n          case \"Integer\":\n            return \"Numbers Only\";\n          case \"String\":\n            return \"Strings Only\";\n          case \"List\":\n            return \"Strings with a double space\";\n          default:\n            return \"text\";\n        }\n      }\n    },\n    VarInterval: {\n      type: () => \"number\",\n      placeholder: () => \"Numbers Only\"\n    },\n    VarBoolean: {\n      type: () => \"checkbox\"\n    }\n  };\n\n  // Get the current table format configuration\n  const currentTableFormat = TableRowFormatRef[tableDataType];\n\n  // Get the input type\n  const getInputType = () => {\n    return (currentTableFormat === null || currentTableFormat === void 0 ? void 0 : currentTableFormat.type()) || \"text\";\n  };\n\n  // Get the placeholder\n  const getPlaceholder = () => {\n    var _currentTableFormat$p;\n    return (currentTableFormat === null || currentTableFormat === void 0 ? void 0 : (_currentTableFormat$p = currentTableFormat.placeholder) === null || _currentTableFormat$p === void 0 ? void 0 : _currentTableFormat$p.call(currentTableFormat)) || \"\";\n  };\n\n  // Get the current value based on the data type\n  const getCurrentValue = () => {\n    if (tableDataType === \"VarBoolean\") {\n      return incomingValues[incomingchangedValues] || false;\n    }\n    if (tableDataType === \"VarStartValue\" && incomingValues.type === \"Date\") {\n      return incomingValues[incomingchangedValues] ? incomingValues[incomingchangedValues].toISOString().split(\"T\")[0] : \"\";\n    }\n    return incomingValues[incomingchangedValues] || \"\";\n  };\n\n  // Handle change events\n  const handleChange = e => {\n    let value = e.target.value;\n\n    // Handle different data types\n    if (tableDataType === \"VarStartValue\" && incomingValues.type === \"Date\") {\n      value = value ? new Date(value) : null;\n    }\n    incomingHandleVariableChanges(incomingKey, incomingchangedValues, value);\n  };\n\n  // Handle click events (for checkboxes)\n  const handleClick = e => {\n    if (tableDataType === \"VarBoolean\") {\n      const newValue = !incomingValues[incomingchangedValues];\n      incomingHandleVariableChanges(incomingKey, incomingchangedValues, newValue);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: tableDataType == \"VarBoolean\" ? /*#__PURE__*/_jsxDEV(CustomToggle, {\n      checked: getCurrentValue(),\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: editableRef,\n      className: `w-full text-center placeholder-sub-color bg-opacity-10 rounded-1 hover:shadow-[0_0_50px_rgba(100,100,100,0.5)] hover:!bg-black hover:!bg-opacity-10`,\n      style: {\n        backgroundColor: incomingCustomBGColorText === \"transparent\" ? \"transparent\" : `${incomingCustomBGColorText}1a`,\n        // 1a is ~10% opacity in hex\n        color: incomingCustomColorText\n      },\n      type: getInputType(),\n      ...(tableDataType === \"VarBoolean\" ? {\n        checked: getCurrentValue(),\n        onClick: handleClick\n      } : {\n        value: getCurrentValue(),\n        onChange: handleChange,\n        placeholder: getPlaceholder()\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(VarTableRowData, \"mQYnusfAer/xTQmlDytc9CVfHhU=\");\n_c = VarTableRowData;\nexport default VarTableRowData;\nvar _c;\n$RefreshReg$(_c, \"VarTableRowData\");","map":{"version":3,"names":["useRef","CustomToggle","jsxDEV","_jsxDEV","Fragment","_Fragment","VarTableRowData","incomingKey","incomingValues","tableDataType","incomingchangedValues","incomingHandleVariableChanges","incomingCustomColorText","incomingCustomBGColorText","_s","editableRef","TableRowFormatRef","VarName","type","placeholder","VarStartValue","VarInterval","VarBoolean","currentTableFormat","getInputType","getPlaceholder","_currentTableFormat$p","call","getCurrentValue","toISOString","split","handleChange","e","value","target","Date","handleClick","newValue","children","checked","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","className","style","backgroundColor","color","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Elgratio/Documents/Learning/Front End - Web Dev/Projects/React App Test/my-app/src/components/var-table-row-data.js"],"sourcesContent":["import { useRef } from \"react\";\r\n// import Form from \"react-bootstrap/Form\";\r\nimport CustomToggle from \"./toggle-custom\";\r\n\r\nfunction VarTableRowData({\r\n  incomingKey,\r\n  incomingValues,\r\n  tableDataType,\r\n  incomingchangedValues,\r\n  incomingHandleVariableChanges,\r\n  incomingCustomColorText,\r\n  incomingCustomBGColorText = \"transparent\",\r\n}) {\r\n  const editableRef = useRef();\r\n\r\n  const TableRowFormatRef = {\r\n    VarName: {\r\n      type: () => \"text\",\r\n      placeholder: () => \"Input String as a Var Name \",\r\n    },\r\n    VarStartValue: {\r\n      type: () => {\r\n        switch (incomingValues.type) {\r\n          case \"Integer\":\r\n            return \"number\";\r\n          case \"Date\":\r\n            return \"date\";\r\n          case \"List\":\r\n            return \"text\";\r\n          default:\r\n            return \"text\";\r\n        }\r\n      },\r\n      placeholder: () => {\r\n        switch (incomingValues.type) {\r\n          case \"Integer\":\r\n            return \"Numbers Only\";\r\n          case \"String\":\r\n            return \"Strings Only\";\r\n          case \"List\":\r\n            return \"Strings with a double space\";\r\n          default:\r\n            return \"text\";\r\n        }\r\n      },\r\n    },\r\n    VarInterval: {\r\n      type: () => \"number\",\r\n      placeholder: () => \"Numbers Only\",\r\n    },\r\n    VarBoolean: {\r\n      type: () => \"checkbox\",\r\n    },\r\n  };\r\n\r\n  // Get the current table format configuration\r\n  const currentTableFormat = TableRowFormatRef[tableDataType];\r\n\r\n  // Get the input type\r\n  const getInputType = () => {\r\n    return currentTableFormat?.type() || \"text\";\r\n  };\r\n\r\n  // Get the placeholder\r\n  const getPlaceholder = () => {\r\n    return currentTableFormat?.placeholder?.() || \"\";\r\n  };\r\n\r\n  // Get the current value based on the data type\r\n  const getCurrentValue = () => {\r\n    if (tableDataType === \"VarBoolean\") {\r\n      return incomingValues[incomingchangedValues] || false;\r\n    }\r\n\r\n    if (tableDataType === \"VarStartValue\" && incomingValues.type === \"Date\") {\r\n      return incomingValues[incomingchangedValues]\r\n        ? incomingValues[incomingchangedValues].toISOString().split(\"T\")[0]\r\n        : \"\";\r\n    }\r\n\r\n    return incomingValues[incomingchangedValues] || \"\";\r\n  };\r\n\r\n  // Handle change events\r\n  const handleChange = (e) => {\r\n    let value = e.target.value;\r\n\r\n    // Handle different data types\r\n    if (tableDataType === \"VarStartValue\" && incomingValues.type === \"Date\") {\r\n      value = value ? new Date(value) : null;\r\n    }\r\n\r\n    incomingHandleVariableChanges(incomingKey, incomingchangedValues, value);\r\n  };\r\n\r\n  // Handle click events (for checkboxes)\r\n  const handleClick = (e) => {\r\n    if (tableDataType === \"VarBoolean\") {\r\n      const newValue = !incomingValues[incomingchangedValues];\r\n      incomingHandleVariableChanges(\r\n        incomingKey,\r\n        incomingchangedValues,\r\n        newValue\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {tableDataType == \"VarBoolean\" ? (\r\n        <CustomToggle\r\n          checked={getCurrentValue()}\r\n          onClick={handleClick}\r\n        ></CustomToggle>\r\n      ) : (\r\n        <input\r\n          ref={editableRef}\r\n          className={`w-full text-center placeholder-sub-color bg-opacity-10 rounded-1 hover:shadow-[0_0_50px_rgba(100,100,100,0.5)] hover:!bg-black hover:!bg-opacity-10`}\r\n          style={{\r\n            backgroundColor:\r\n              incomingCustomBGColorText === \"transparent\"\r\n                ? \"transparent\"\r\n                : `${incomingCustomBGColorText}1a`, // 1a is ~10% opacity in hex\r\n            color: incomingCustomColorText,\r\n          }}\r\n          type={getInputType()}\r\n          {...(tableDataType === \"VarBoolean\"\r\n            ? {\r\n                checked: getCurrentValue(),\r\n                onClick: handleClick,\r\n              }\r\n            : {\r\n                value: getCurrentValue(),\r\n                onChange: handleChange,\r\n                placeholder: getPlaceholder(),\r\n              })}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VarTableRowData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}