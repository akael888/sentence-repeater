{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elgratio\\\\Documents\\\\Learning\\\\Front End - Web Dev\\\\Projects\\\\React App Test\\\\my-app\\\\src\\\\components\\\\var-table-row-data.js\",\n  _s = $RefreshSig$();\nimport { useRef, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction VarTableRowData({\n  incomingKey,\n  incomingValues,\n  tableDataType,\n  incomingchangedValues,\n  incomingHandleVariableChanges\n}) {\n  _s();\n  console.log(\"VarTableRowData render - Key:\", incomingKey, \"Values:\", incomingValues);\n  const editableRef = useRef();\n  const TableRowFormatRef = {\n    VarName: {\n      type: \"text\",\n      placeholder: \"Input Var Name for Var \" + incomingKey,\n      widthCSS: 60\n    },\n    VarStartValue: {\n      type: (() => {\n        switch (incomingValues.type) {\n          case \"Integer\":\n            return \"number\";\n          case \"Date\":\n            return \"date\";\n          case \"List\":\n            return \"text\";\n          default:\n            return \"text\";\n        }\n      })(),\n      placeholder: (() => {\n        switch (incomingValues.type) {\n          case \"Integer\":\n            return \"Numbers Only\";\n          case \"String\":\n            return \"Strings Only\";\n          case \"List\":\n            return \"Strings with a space\";\n          default:\n            return \"text\";\n        }\n      })(),\n      widthCSS: 20\n    },\n    VarInterval: {\n      type: \"number\",\n      placeholder: \"Numbers Only\",\n      widthCSS: 100\n    },\n    VarBoolean: {\n      type: \"checkbox\",\n      widthCSS: 50\n    }\n  };\n  const currentFormat = TableRowFormatRef[tableDataType];\n\n  // Get current value based on type and data\n  const getCurrentValue = useCallback(() => {\n    if (tableDataType === \"VarBoolean\") {\n      return Boolean(incomingValues[incomingchangedValues]);\n    }\n    if (tableDataType === \"VarStartValue\" && incomingValues.type === \"Date\") {\n      const dateValue = incomingValues[incomingchangedValues];\n      return dateValue ? dateValue.toISOString().split(\"T\")[0] : \"\";\n    }\n    return incomingValues[incomingchangedValues] || \"\";\n  }, [tableDataType, incomingValues, incomingchangedValues]);\n\n  // Handle input changes\n  const handleChange = useCallback(e => {\n    console.log(\"handleChange called with:\", e.target.value);\n    let value = e.target.value;\n\n    // Handle date conversion\n    if (tableDataType === \"VarStartValue\" && incomingValues.type === \"Date\") {\n      value = value ? new Date(value) : null;\n    }\n    console.log(\"About to call incomingHandleVariableChanges with:\", incomingKey, incomingchangedValues, value);\n    incomingHandleVariableChanges(incomingKey, incomingchangedValues, value);\n  }, [tableDataType, incomingValues.type, incomingKey, incomingchangedValues, incomingHandleVariableChanges]);\n\n  // Handle checkbox clicks\n  const handleClick = useCallback(e => {\n    console.log(\"handleClick called\");\n    if (tableDataType === \"VarBoolean\") {\n      const newValue = !incomingValues[incomingchangedValues];\n      console.log(\"About to call incomingHandleVariableChanges with:\", incomingKey, incomingchangedValues, newValue);\n      incomingHandleVariableChanges(incomingKey, incomingchangedValues, newValue);\n    }\n  }, [tableDataType, incomingValues, incomingchangedValues, incomingKey, incomingHandleVariableChanges]);\n\n  // Tailwind Styles\n  const selectedWidthCSS = (currentFormat === null || currentFormat === void 0 ? void 0 : currentFormat.widthCSS) || 100;\n  const tw_varInputData_sm = \" sm:w-full\";\n  const tw_varInputData_md = \" md:w-full\";\n  const tw_varInputData_lg = ` lg:w-[${selectedWidthCSS}%]`;\n  const tw_varInputData_xl = ` xl:w-[${selectedWidthCSS}%]`;\n  const tw_varInputDatar_2xl = ` 2xl:w-[${selectedWidthCSS}%]`;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: editableRef,\n      className: \"w-full text-center bg-transparent text-white placeholder-sub-color shrink-1\",\n      type: (currentFormat === null || currentFormat === void 0 ? void 0 : currentFormat.type) || \"text\",\n      ...(tableDataType === \"VarBoolean\" ? {\n        checked: getCurrentValue(),\n        onClick: handleClick\n      } : {\n        value: getCurrentValue(),\n        onChange: handleChange,\n        placeholder: (currentFormat === null || currentFormat === void 0 ? void 0 : currentFormat.placeholder) || \"\"\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(VarTableRowData, \"0X2VLP7UZwgUifW9i9o4PUCibVw=\");\n_c = VarTableRowData;\nexport default VarTableRowData;\nvar _c;\n$RefreshReg$(_c, \"VarTableRowData\");","map":{"version":3,"names":["useRef","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","VarTableRowData","incomingKey","incomingValues","tableDataType","incomingchangedValues","incomingHandleVariableChanges","_s","console","log","editableRef","TableRowFormatRef","VarName","type","placeholder","widthCSS","VarStartValue","VarInterval","VarBoolean","currentFormat","getCurrentValue","Boolean","dateValue","toISOString","split","handleChange","e","target","value","Date","handleClick","newValue","selectedWidthCSS","tw_varInputData_sm","tw_varInputData_md","tw_varInputData_lg","tw_varInputData_xl","tw_varInputDatar_2xl","children","ref","className","checked","onClick","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Elgratio/Documents/Learning/Front End - Web Dev/Projects/React App Test/my-app/src/components/var-table-row-data.js"],"sourcesContent":["import { useRef, useCallback } from \"react\";\r\n\r\nfunction VarTableRowData({\r\n  incomingKey,\r\n  incomingValues,\r\n  tableDataType,\r\n  incomingchangedValues,\r\n  incomingHandleVariableChanges,\r\n}) {\r\n  console.log(\"VarTableRowData render - Key:\", incomingKey, \"Values:\", incomingValues);\r\n  const editableRef = useRef();\r\n\r\n  const TableRowFormatRef = {\r\n    VarName: {\r\n      type: \"text\",\r\n      placeholder: \"Input Var Name for Var \" + incomingKey,\r\n      widthCSS: 60,\r\n    },\r\n    VarStartValue: {\r\n      type: (() => {\r\n        switch (incomingValues.type) {\r\n          case \"Integer\":\r\n            return \"number\";\r\n          case \"Date\":\r\n            return \"date\";\r\n          case \"List\":\r\n            return \"text\";\r\n          default:\r\n            return \"text\";\r\n        }\r\n      })(),\r\n      placeholder: (() => {\r\n        switch (incomingValues.type) {\r\n          case \"Integer\":\r\n            return \"Numbers Only\";\r\n          case \"String\":\r\n            return \"Strings Only\";\r\n          case \"List\":\r\n            return \"Strings with a space\";\r\n          default:\r\n            return \"text\";\r\n        }\r\n      })(),\r\n      widthCSS: 20,\r\n    },\r\n    VarInterval: {\r\n      type: \"number\",\r\n      placeholder: \"Numbers Only\",\r\n      widthCSS: 100,\r\n    },\r\n    VarBoolean: {\r\n      type: \"checkbox\",\r\n      widthCSS: 50,\r\n    },\r\n  };\r\n\r\n  const currentFormat = TableRowFormatRef[tableDataType];\r\n\r\n  // Get current value based on type and data\r\n  const getCurrentValue = useCallback(() => {\r\n    if (tableDataType === \"VarBoolean\") {\r\n      return Boolean(incomingValues[incomingchangedValues]);\r\n    }\r\n    \r\n    if (tableDataType === \"VarStartValue\" && incomingValues.type === \"Date\") {\r\n      const dateValue = incomingValues[incomingchangedValues];\r\n      return dateValue ? dateValue.toISOString().split(\"T\")[0] : \"\";\r\n    }\r\n    \r\n    return incomingValues[incomingchangedValues] || \"\";\r\n  }, [tableDataType, incomingValues, incomingchangedValues]);\r\n\r\n  // Handle input changes\r\n  const handleChange = useCallback((e) => {\r\n    console.log(\"handleChange called with:\", e.target.value);\r\n    \r\n    let value = e.target.value;\r\n    \r\n    // Handle date conversion\r\n    if (tableDataType === \"VarStartValue\" && incomingValues.type === \"Date\") {\r\n      value = value ? new Date(value) : null;\r\n    }\r\n    \r\n    console.log(\"About to call incomingHandleVariableChanges with:\", incomingKey, incomingchangedValues, value);\r\n    incomingHandleVariableChanges(incomingKey, incomingchangedValues, value);\r\n  }, [tableDataType, incomingValues.type, incomingKey, incomingchangedValues, incomingHandleVariableChanges]);\r\n\r\n  // Handle checkbox clicks\r\n  const handleClick = useCallback((e) => {\r\n    console.log(\"handleClick called\");\r\n    if (tableDataType === \"VarBoolean\") {\r\n      const newValue = !incomingValues[incomingchangedValues];\r\n      console.log(\"About to call incomingHandleVariableChanges with:\", incomingKey, incomingchangedValues, newValue);\r\n      incomingHandleVariableChanges(incomingKey, incomingchangedValues, newValue);\r\n    }\r\n  }, [tableDataType, incomingValues, incomingchangedValues, incomingKey, incomingHandleVariableChanges]);\r\n\r\n  // Tailwind Styles\r\n  const selectedWidthCSS = currentFormat?.widthCSS || 100;\r\n  const tw_varInputData_sm = \" sm:w-full\";\r\n  const tw_varInputData_md = \" md:w-full\";\r\n  const tw_varInputData_lg = ` lg:w-[${selectedWidthCSS}%]`;\r\n  const tw_varInputData_xl = ` xl:w-[${selectedWidthCSS}%]`;\r\n  const tw_varInputDatar_2xl = ` 2xl:w-[${selectedWidthCSS}%]`;\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        ref={editableRef}\r\n        className=\"w-full text-center bg-transparent text-white placeholder-sub-color shrink-1\"\r\n        type={currentFormat?.type || \"text\"}\r\n        {...(tableDataType === \"VarBoolean\"\r\n          ? {\r\n              checked: getCurrentValue(),\r\n              onClick: handleClick,\r\n            }\r\n          : {\r\n              value: getCurrentValue(),\r\n              onChange: handleChange,\r\n              placeholder: currentFormat?.placeholder || \"\",\r\n            })}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VarTableRowData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}