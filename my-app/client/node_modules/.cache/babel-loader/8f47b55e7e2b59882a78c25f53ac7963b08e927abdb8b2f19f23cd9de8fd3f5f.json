{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elgratio\\\\Documents\\\\Learning\\\\Front End - Web Dev\\\\Projects\\\\React App Test\\\\my-app\\\\src\\\\components\\\\generator.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport css from \"./generator.module.css\";\nimport { motion, scale } from \"motion/react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Generator({\n  incomingVariables,\n  incomingPreviewText,\n  incomingHandleGeneratedSentenceChanges,\n  incomingHighestListVar\n}) {\n  _s();\n  // Tailwind CSS\n\n  //Generator\n  let tw_generator_sm = \" \";\n  let tw_generator_md = \" md:w-full\";\n  let tw_generator_lg = \" lg:w-3/12\";\n  let tw_generator_xl = \" \";\n  let tw_generator_2xl = \" \";\n  let tw_generateButton_glassMorphBG = \" shadow-[0_10px_30px_rgba(0,0,0,0.35)] backdrop-blur-[6px] backdrop-saturate-[120%]  rounded-[18px]\";\n  let tw_inputAmount_hover = \" hover:shadow-[0_0_30px_rgba(100,100,100,0.35)] hover:text-[color:var(--main-color)] hover:border hover:border-white hover:border-solid\";\n  let tw_generateButton_hover = \" hover:shadow-[0_0_30px_rgba(100,100,100,0.35)] hover:text-[color:var(--opposite-color)] \";\n\n  //both of these seems redundant! need refactor later!\n  const [generatedSentenceAmount, setGeneratedSentenceAmount] = useState(0);\n  const [inputValue, setInputValue] = useState(() => {\n    try {\n      const stored = localStorage.getItem(\"CURRENT_GEN_AMOUNT\");\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        return parsed;\n      }\n    } catch (err) {\n      console.error(\"Failed to parse generated amount from localStorage:\", err);\n    }\n    return 0;\n  });\n  let requiredFilled = inputValue != 0 && incomingPreviewText != \"\";\n  useEffect(() => {\n    localStorage.setItem(\"CURRENT_GEN_AMOUNT\", JSON.stringify(inputValue));\n  }, [inputValue]);\n  useEffect(() => {\n    var _incomingHighestListV;\n    console.log(\"incomingHighestListVar changed:\", incomingHighestListVar);\n    console.log(\"List length:\", incomingHighestListVar === null || incomingHighestListVar === void 0 ? void 0 : (_incomingHighestListV = incomingHighestListVar.list) === null || _incomingHighestListV === void 0 ? void 0 : _incomingHighestListV.length);\n    console.log(\"Interval:\", incomingHighestListVar === null || incomingHighestListVar === void 0 ? void 0 : incomingHighestListVar.interval);\n    if (!(incomingHighestListVar !== null && incomingHighestListVar !== void 0 && incomingHighestListVar.list)) return;\n    if (incomingHighestListVar.list.length != 0) {\n      let listTotalLength = incomingHighestListVar.list.length * incomingHighestListVar.interval;\n      setInputValue(listTotalLength || \"\");\n      handleGeneratedSentenceAmountChanges(listTotalLength);\n    }\n  }, [JSON.stringify(incomingHighestListVar)]);\n  function handleGeneratedSentenceAmountChanges(amount) {\n    console.log(\"AMount Generated Sentence: \", amount);\n    setGeneratedSentenceAmount(amount);\n    console.log(\"AMount Generated Sentence After: \", generatedSentenceAmount);\n    console.log(\"==== AMount Generated Sentence\");\n  }\n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  function getRandomfromList(sourceList) {\n    const randomIndex = Math.floor(Math.random() * sourceList.length);\n    return sourceList[randomIndex];\n  }\n  function getRandomfromDate(minDate, maxDate) {\n    const minDateTimeStamp = minDate.getTime();\n    const maxDateTimeStamp = maxDate.getTime();\n    const randomTimeStamp = minDateTimeStamp + Math.random() * (maxDateTimeStamp - minDateTimeStamp + 1);\n    const randomDate = new Date(randomTimeStamp);\n    console.log(\"Min Time Stamp : \" + minDateTimeStamp);\n    console.log(\"Min Time Stamp Date : \" + minDate);\n    console.log(\"Max Time Stamp : \" + maxDateTimeStamp);\n    console.log(\"Max Time Stamp Date : \" + maxDate);\n    console.log(\"Random Time Stamp : \" + randomTimeStamp);\n\n    // const formatYear = randomDate.getFullYear();\n    // const formatMonth = randomDate.getMonth()+1;\n    // const formatDate =randomDate.getDate();\n    // const formattedDate = `-${formatMonth} ${formatDate},${formatYear}`\n\n    const formattedDate = randomDate.toLocaleString(\"en-US\", {\n      dateStyle: \"long\"\n    });\n    return formattedDate;\n  }\n  function generateSentence() {\n    let tempPreviewText = incomingPreviewText;\n    let localGeneratedSentence = [];\n    const localVariables = new Map();\n\n    // console.log(\"Main Text in Generate Text : \" + incomingPreviewText);\n\n    //Set the local variables into the incoming variables\n    for (const [key, value] of incomingVariables.entries()) {\n      localVariables.set(key, {\n        ...value\n      }); // Spread operator creates new object\n    }\n    // let text = tempPreviewText;\n\n    //DEBUG LOG --------------------------------------------\n    console.log(\"Generate Text () Log----------\");\n    console.log(\"incomingVariables: \" + incomingVariables);\n    console.log(\"Temp Preview Text: \" + tempPreviewText);\n    console.log(`Temp Preview Text:-${tempPreviewText}- `);\n    console.log(\"Type Preview Text: \" + typeof tempPreviewText);\n    console.log(\"incomingPreviewText !=  Preview Text: \" + (incomingPreviewText != \"\"));\n    console.log(\"incomingPreviewText != null  Preview Text: \" + (incomingPreviewText != null));\n    console.log(\"incomingPreviewText != undefined  Preview Text: \" + (incomingPreviewText != undefined));\n    console.dir(incomingPreviewText);\n    console.log(\"Temp Preview Text Size: \" + tempPreviewText.length);\n    console.log(\"Generated Sentence Amount: \" + generatedSentenceAmount);\n    // console.log(\"Text: \" + text);\n    console.log(\"-----------------------------\");\n    //-------------------------------------------\n\n    //Generate the Sentences and pushes them into local generated sentence array\n    let currentKeyIndex = 0;\n    let tempDate = new Date();\n    for (let i = 0; i < generatedSentenceAmount; i++) {\n      let generatedText = tempPreviewText;\n      const variableEntries = Array.from(localVariables.entries());\n      while (generatedText.includes(\"{}\") && variableEntries.length > 0) {\n        const [key, values] = variableEntries[currentKeyIndex % variableEntries.length];\n\n        //If Randomize is True -------------------------------\n        if (values.randomize) {\n          switch (values.type) {\n            case \"Integer\":\n              values.displayText = getRandomInt(values.minValue, values.maxValue);\n              break;\n            case \"List\":\n              values.displayText = getRandomfromList(values.list);\n              break;\n            case \"Date\":\n              values.displayText = getRandomfromDate(values.minDateValue, values.maxDateValue);\n              break;\n            default:\n              break;\n          }\n        }\n\n        //If Iterate is True ----------------------------------\n        else if (values.iterate) {\n          switch (values.type) {\n            case \"Integer\":\n              values.displayText = parseInt(values.value);\n              values.value = parseInt(values.value) + parseInt(values.interval);\n              break;\n            case \"List\":\n              if (i === 0) {\n                let tempListContainer = [];\n                let totalListLen = values.list.length * values.interval;\n                for (let x = 0; x < totalListLen; x++) {\n                  let listIndex = Math.floor(x / values.interval);\n                  tempListContainer.push(values.list[listIndex]);\n                  console.log(\"Temp List Parsed\", tempListContainer, \"and List Index :\", listIndex, \"mathfloor\", x / values.interval);\n                }\n                values.listParsed = tempListContainer;\n              }\n              values.displayText = values.listParsed[i];\n              break;\n            case \"Date\":\n              if (i === 0) {\n                tempDate = new Date(values.dateValue);\n              }\n              values.displayText = tempDate.toLocaleDateString(\"en-US\", {\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\"\n              });\n              if (tempDate !== null) {\n                tempDate = new Date(tempDate.setDate(tempDate.getDate() + parseInt(values.interval)));\n              }\n              break;\n            default:\n              break;\n          }\n        }\n\n        //If Randomize and Iterate are false ----------------------------\n        else {\n          switch (values.type) {\n            case \"Integer\":\n              values.displayText = values.value;\n              break;\n            case \"List\":\n              values.displayText = values.list;\n              break;\n            case \"Date\":\n              values.displayText = values.dateValue.toLocaleString(\"en-US\", {\n                dateStyle: \"long\"\n              });\n              break;\n            case \"String\":\n              values.displayText = values.value;\n              break;\n            default:\n              break;\n          }\n        }\n\n        //Replace Each Variable Marker with Display Text Value\n        generatedText = generatedText.replace(\"{}\", String(values.displayText));\n\n        //Increase the Index of Variable\n        currentKeyIndex++;\n      }\n      console.log(`Generated Text: ${generatedText} with this order [${i}]`);\n\n      //Push Generated Sentence into a List of Generated Sentence\n      localGeneratedSentence.push(generatedText);\n    }\n\n    // setGeneratedSentenceAmount(0);\n    // console.log(\"Break Text: \" + text);\n    //Passing the local generated sentence into the parent compoonents\n\n    //Push the List into the Parent Component\n    incomingHandleGeneratedSentenceChanges(localGeneratedSentence);\n    console.log(\"GenerateSentence END OF LOG---------\");\n    return localGeneratedSentence;\n  }\n\n  // const breakincomingPreviewText = (text) => {\n  //   const splitText = text.split(\"{}\");\n  //   return splitText;\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-auto grid place-items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-[100%] inline-flex max-w-[80%] [&>*]:max-w-[80%] place-content-center rounded-[10px] gap-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \" w-full h-full text-white text-center rounded-[10px] bg-white bg-opacity-10 shadow-[0_10px_30px_rgba(0,0,0,0.35)] backdrop-blur-[6px] backdrop-saturate-[120%]  rounded-[18px]\" + tw_inputAmount_hover,\n          type: \"number\",\n          onChange: e => {\n            setInputValue(e.target.value);\n            handleGeneratedSentenceAmountChanges(e.target.value);\n          },\n          placeholder: \"Amount\",\n          value: inputValue,\n          required: \"true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n          className: \"w-full h-full grid place-items-center text-main-color animate-[scaleUp_2s_ease-in-out_infinite] rounded-[5px] border-[none] \" + (requiredFilled ? tw_generateButton_glassMorphBG + tw_generateButton_hover : \" shadow-[0_10px_30px_rgba(0,0,0,0.35)] backdrop-blur-[6px] backdrop-saturate-[120%] rounded-[18px] bg-stone-700 bg-opacity-80\"),\n          whileTap: requiredFilled ? {\n            scale: 0.9\n          } : {\n            x: 10\n          },\n          children: /*#__PURE__*/_jsxDEV(motion.button, {\n            className: \"w-full h-full p-[5px]\",\n            onClick: generateSentence,\n            disabled: !requiredFilled,\n            children: \"Generate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Generator, \"DmmMaM8/qyvS4iQpFhfgcx10xRY=\");\n_c = Generator;\nexport default Generator;\nvar _c;\n$RefreshReg$(_c, \"Generator\");","map":{"version":3,"names":["useEffect","useState","css","motion","scale","jsxDEV","_jsxDEV","Fragment","_Fragment","Generator","incomingVariables","incomingPreviewText","incomingHandleGeneratedSentenceChanges","incomingHighestListVar","_s","tw_generator_sm","tw_generator_md","tw_generator_lg","tw_generator_xl","tw_generator_2xl","tw_generateButton_glassMorphBG","tw_inputAmount_hover","tw_generateButton_hover","generatedSentenceAmount","setGeneratedSentenceAmount","inputValue","setInputValue","stored","localStorage","getItem","parsed","JSON","parse","err","console","error","requiredFilled","setItem","stringify","_incomingHighestListV","log","list","length","interval","listTotalLength","handleGeneratedSentenceAmountChanges","amount","getRandomInt","min","max","Math","ceil","floor","random","getRandomfromList","sourceList","randomIndex","getRandomfromDate","minDate","maxDate","minDateTimeStamp","getTime","maxDateTimeStamp","randomTimeStamp","randomDate","Date","formattedDate","toLocaleString","dateStyle","generateSentence","tempPreviewText","localGeneratedSentence","localVariables","Map","key","value","entries","set","undefined","dir","currentKeyIndex","tempDate","i","generatedText","variableEntries","Array","from","includes","values","randomize","type","displayText","minValue","maxValue","minDateValue","maxDateValue","iterate","parseInt","tempListContainer","totalListLen","x","listIndex","push","listParsed","dateValue","toLocaleDateString","year","month","day","setDate","getDate","replace","String","children","className","onChange","e","target","placeholder","required","fileName","_jsxFileName","lineNumber","columnNumber","div","whileTap","button","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Elgratio/Documents/Learning/Front End - Web Dev/Projects/React App Test/my-app/src/components/generator.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport css from \"./generator.module.css\";\r\nimport { motion, scale } from \"motion/react\";\r\n\r\nfunction Generator({\r\n  incomingVariables,\r\n  incomingPreviewText,\r\n  incomingHandleGeneratedSentenceChanges,\r\n  incomingHighestListVar,\r\n}) {\r\n  // Tailwind CSS\r\n\r\n  //Generator\r\n  let tw_generator_sm = \" \";\r\n  let tw_generator_md = \" md:w-full\";\r\n  let tw_generator_lg = \" lg:w-3/12\";\r\n  let tw_generator_xl = \" \";\r\n  let tw_generator_2xl = \" \";\r\n\r\n  let tw_generateButton_glassMorphBG = \" shadow-[0_10px_30px_rgba(0,0,0,0.35)] backdrop-blur-[6px] backdrop-saturate-[120%]  rounded-[18px]\";\r\n  let tw_inputAmount_hover =\r\n    \" hover:shadow-[0_0_30px_rgba(100,100,100,0.35)] hover:text-[color:var(--main-color)] hover:border hover:border-white hover:border-solid\";\r\n  let tw_generateButton_hover =\r\n    \" hover:shadow-[0_0_30px_rgba(100,100,100,0.35)] hover:text-[color:var(--opposite-color)] \";\r\n\r\n  //both of these seems redundant! need refactor later!\r\n  const [generatedSentenceAmount, setGeneratedSentenceAmount] = useState(0);\r\n  const [inputValue, setInputValue] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem(\"CURRENT_GEN_AMOUNT\");\r\n      if (stored) {\r\n        const parsed = JSON.parse(stored);\r\n        return parsed;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to parse generated amount from localStorage:\", err);\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  let requiredFilled = inputValue != 0 && incomingPreviewText != \"\";\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"CURRENT_GEN_AMOUNT\", JSON.stringify(inputValue));\r\n  }, [inputValue]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"incomingHighestListVar changed:\", incomingHighestListVar);\r\n    console.log(\"List length:\", incomingHighestListVar?.list?.length);\r\n    console.log(\"Interval:\", incomingHighestListVar?.interval);\r\n\r\n    if (!incomingHighestListVar?.list) return;\r\n\r\n    if (incomingHighestListVar.list.length != 0) {\r\n      let listTotalLength =\r\n        incomingHighestListVar.list.length * incomingHighestListVar.interval;\r\n\r\n      setInputValue(listTotalLength || \"\");\r\n      handleGeneratedSentenceAmountChanges(listTotalLength);\r\n    }\r\n  }, [JSON.stringify(incomingHighestListVar)]);\r\n\r\n  function handleGeneratedSentenceAmountChanges(amount) {\r\n    console.log(\"AMount Generated Sentence: \", amount);\r\n    setGeneratedSentenceAmount(amount);\r\n    console.log(\"AMount Generated Sentence After: \", generatedSentenceAmount);\r\n    console.log(\"==== AMount Generated Sentence\");\r\n  }\r\n\r\n  function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  function getRandomfromList(sourceList) {\r\n    const randomIndex = Math.floor(Math.random() * sourceList.length);\r\n    return sourceList[randomIndex];\r\n  }\r\n\r\n  function getRandomfromDate(minDate, maxDate) {\r\n    const minDateTimeStamp = minDate.getTime();\r\n    const maxDateTimeStamp = maxDate.getTime();\r\n\r\n    const randomTimeStamp =\r\n      minDateTimeStamp +\r\n      Math.random() * (maxDateTimeStamp - minDateTimeStamp + 1);\r\n    const randomDate = new Date(randomTimeStamp);\r\n    console.log(\"Min Time Stamp : \" + minDateTimeStamp);\r\n    console.log(\"Min Time Stamp Date : \" + minDate);\r\n    console.log(\"Max Time Stamp : \" + maxDateTimeStamp);\r\n    console.log(\"Max Time Stamp Date : \" + maxDate);\r\n    console.log(\"Random Time Stamp : \" + randomTimeStamp);\r\n\r\n    // const formatYear = randomDate.getFullYear();\r\n    // const formatMonth = randomDate.getMonth()+1;\r\n    // const formatDate =randomDate.getDate();\r\n    // const formattedDate = `-${formatMonth} ${formatDate},${formatYear}`\r\n\r\n    const formattedDate = randomDate.toLocaleString(\"en-US\", {\r\n      dateStyle: \"long\",\r\n    });\r\n\r\n    return formattedDate;\r\n  }\r\n\r\n  function generateSentence() {\r\n    let tempPreviewText = incomingPreviewText;\r\n    let localGeneratedSentence = [];\r\n\r\n    const localVariables = new Map();\r\n\r\n    // console.log(\"Main Text in Generate Text : \" + incomingPreviewText);\r\n\r\n    //Set the local variables into the incoming variables\r\n    for (const [key, value] of incomingVariables.entries()) {\r\n      localVariables.set(key, { ...value }); // Spread operator creates new object\r\n    }\r\n    // let text = tempPreviewText;\r\n\r\n    //DEBUG LOG --------------------------------------------\r\n    console.log(\"Generate Text () Log----------\");\r\n    console.log(\"incomingVariables: \" + incomingVariables);\r\n    console.log(\"Temp Preview Text: \" + tempPreviewText);\r\n    console.log(`Temp Preview Text:-${tempPreviewText}- `);\r\n    console.log(\"Type Preview Text: \" + typeof tempPreviewText);\r\n    console.log(\r\n      \"incomingPreviewText !=  Preview Text: \" + (incomingPreviewText != \"\")\r\n    );\r\n    console.log(\r\n      \"incomingPreviewText != null  Preview Text: \" +\r\n        (incomingPreviewText != null)\r\n    );\r\n    console.log(\r\n      \"incomingPreviewText != undefined  Preview Text: \" +\r\n        (incomingPreviewText != undefined)\r\n    );\r\n    console.dir(incomingPreviewText);\r\n    console.log(\"Temp Preview Text Size: \" + tempPreviewText.length);\r\n    console.log(\"Generated Sentence Amount: \" + generatedSentenceAmount);\r\n    // console.log(\"Text: \" + text);\r\n    console.log(\"-----------------------------\");\r\n    //-------------------------------------------\r\n\r\n    //Generate the Sentences and pushes them into local generated sentence array\r\n    let currentKeyIndex = 0;\r\n    let tempDate = new Date();\r\n    for (let i = 0; i < generatedSentenceAmount; i++) {\r\n      let generatedText = tempPreviewText;\r\n      const variableEntries = Array.from(localVariables.entries());\r\n\r\n      while (generatedText.includes(\"{}\") && variableEntries.length > 0) {\r\n        const [key, values] =\r\n          variableEntries[currentKeyIndex % variableEntries.length];\r\n\r\n        //If Randomize is True -------------------------------\r\n        if (values.randomize) {\r\n          switch (values.type) {\r\n            case \"Integer\":\r\n              values.displayText = getRandomInt(\r\n                values.minValue,\r\n                values.maxValue\r\n              );\r\n              break;\r\n\r\n            case \"List\":\r\n              values.displayText = getRandomfromList(values.list);\r\n              break;\r\n            case \"Date\":\r\n              values.displayText = getRandomfromDate(\r\n                values.minDateValue,\r\n                values.maxDateValue\r\n              );\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n\r\n        //If Iterate is True ----------------------------------\r\n        else if (values.iterate) {\r\n          switch (values.type) {\r\n            case \"Integer\":\r\n              values.displayText = parseInt(values.value);\r\n              values.value = parseInt(values.value) + parseInt(values.interval);\r\n              break;\r\n            case \"List\":\r\n              if (i === 0) {\r\n                let tempListContainer = [];\r\n                let totalListLen = values.list.length * values.interval;\r\n                for (let x = 0; x < totalListLen; x++) {\r\n                  let listIndex = Math.floor(x / values.interval);\r\n                  tempListContainer.push(values.list[listIndex]);\r\n                  console.log(\r\n                    \"Temp List Parsed\",\r\n                    tempListContainer,\r\n                    \"and List Index :\",\r\n                    listIndex,\r\n                    \"mathfloor\",\r\n                    x / values.interval\r\n                  );\r\n                }\r\n                values.listParsed = tempListContainer;\r\n              }\r\n\r\n              values.displayText = values.listParsed[i];\r\n\r\n              break;\r\n            case \"Date\":\r\n              if (i === 0) {\r\n                tempDate = new Date(values.dateValue);\r\n              }\r\n              values.displayText = tempDate.toLocaleDateString(\"en-US\", {\r\n                year: \"numeric\",\r\n                month: \"long\",\r\n                day: \"numeric\",\r\n              });\r\n              if (tempDate !== null) {\r\n                tempDate = new Date(\r\n                  tempDate.setDate(\r\n                    tempDate.getDate() + parseInt(values.interval)\r\n                  )\r\n                );\r\n              }\r\n\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n\r\n        //If Randomize and Iterate are false ----------------------------\r\n        else {\r\n          switch (values.type) {\r\n            case \"Integer\":\r\n              values.displayText = values.value;\r\n              break;\r\n            case \"List\":\r\n              values.displayText = values.list;\r\n              break;\r\n            case \"Date\":\r\n              values.displayText = values.dateValue.toLocaleString(\"en-US\", {\r\n                dateStyle: \"long\",\r\n              });\r\n              break;\r\n            case \"String\":\r\n              values.displayText = values.value;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n\r\n        //Replace Each Variable Marker with Display Text Value\r\n        generatedText = generatedText.replace(\"{}\", String(values.displayText));\r\n\r\n        //Increase the Index of Variable\r\n        currentKeyIndex++;\r\n      }\r\n\r\n      console.log(`Generated Text: ${generatedText} with this order [${i}]`);\r\n\r\n      //Push Generated Sentence into a List of Generated Sentence\r\n      localGeneratedSentence.push(generatedText);\r\n    }\r\n\r\n    // setGeneratedSentenceAmount(0);\r\n    // console.log(\"Break Text: \" + text);\r\n    //Passing the local generated sentence into the parent compoonents\r\n\r\n    //Push the List into the Parent Component\r\n    incomingHandleGeneratedSentenceChanges(localGeneratedSentence);\r\n    console.log(\"GenerateSentence END OF LOG---------\");\r\n    return localGeneratedSentence;\r\n  }\r\n\r\n  // const breakincomingPreviewText = (text) => {\r\n  //   const splitText = text.split(\"{}\");\r\n  //   return splitText;\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-full h-auto grid place-items-center\">\r\n        <div\r\n          className={\r\n            \"w-full h-[100%] inline-flex max-w-[80%] [&>*]:max-w-[80%] place-content-center rounded-[10px] gap-1\"\r\n          }\r\n        >\r\n          <input\r\n            className={\r\n              \" w-full h-full text-white text-center rounded-[10px] bg-white bg-opacity-10 shadow-[0_10px_30px_rgba(0,0,0,0.35)] backdrop-blur-[6px] backdrop-saturate-[120%]  rounded-[18px]\" +\r\n              tw_inputAmount_hover\r\n            }\r\n            type=\"number\"\r\n            onChange={(e) => {\r\n              setInputValue(e.target.value);\r\n              handleGeneratedSentenceAmountChanges(e.target.value);\r\n            }}\r\n            placeholder=\"Amount\"\r\n            value={inputValue}\r\n            required=\"true\"\r\n          />\r\n          <motion.div\r\n            className={\r\n              \"w-full h-full grid place-items-center text-main-color animate-[scaleUp_2s_ease-in-out_infinite] rounded-[5px] border-[none] \" +\r\n              (requiredFilled\r\n                ? tw_generateButton_glassMorphBG + tw_generateButton_hover\r\n                : \" shadow-[0_10px_30px_rgba(0,0,0,0.35)] backdrop-blur-[6px] backdrop-saturate-[120%] rounded-[18px] bg-stone-700 bg-opacity-80\")\r\n            }\r\n            whileTap={requiredFilled ? { scale: 0.9 } : { x: 10 }}\r\n          >\r\n            <motion.button\r\n              className=\"w-full h-full p-[5px]\"\r\n              onClick={generateSentence}\r\n              disabled={!requiredFilled}\r\n            >\r\n              Generate\r\n            </motion.button>\r\n          </motion.div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Generator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}