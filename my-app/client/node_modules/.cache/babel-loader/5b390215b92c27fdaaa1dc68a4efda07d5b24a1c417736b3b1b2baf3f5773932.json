{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elgratio\\\\Documents\\\\Learning\\\\Front End - Web Dev\\\\Projects\\\\React App Test\\\\my-app\\\\src\\\\components\\\\text-input.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState, useEffect, use } from \"react\";\nimport css from \"./text-input.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TextInput({\n  incomingHandlePreviewTextChanges,\n  incomingHandleVariablesChanges,\n  incomingVariables\n}) {\n  _s();\n  //Tailwind Styles\n\n  //Text Input\n  let tw_textInput_md = \" md:w-[100%] md:p-[10px]\";\n  let tw_textInput_lg = \" lg:w-[50%]\";\n  let tw_textInput_focus = \" focus:bg-opposite-color focus:text-main-color focus:border focus:border-main-color focus:border-solid\";\n  let tw_textInput_hover = \" hover:bg-opposite-color hover:text-main-color hover:border hover:border-main-color hover:border-solid\";\n  const [tempVariables, setTempVariables] = useState(new Map());\n  function addVariableOnInput(e) {\n    const textInput = e.target.value;\n\n    // Search for {} in the text\n    let searchPos = 0;\n    let allBracketPositions = [];\n    while (searchPos < textInput.length) {\n      const bracketPos = textInput.indexOf(\"{}\", searchPos);\n      if (bracketPos === -1) break;\n      allBracketPositions.push(bracketPos);\n      searchPos = bracketPos + 1;\n    }\n    const updatedVariables = new Map(tempVariables);\n    allBracketPositions.forEach((position, index) => {\n      if (!updatedVariables.has(index)) {\n        updatedVariables.set(index, {\n          id: position,\n          name: \"Variable \" + index,\n          type: \"Integer\",\n          value: index,\n          minValue: index,\n          maxValue: 10,\n          iterate: true,\n          interval: 1,\n          randomize: false,\n          displayText: \"Display Text\" //now that i think of it, should this be put inside a temp variable?\n        });\n      }\n    });\n    console.log(\"preview text: before enter\" + textInput);\n    incomingHandlePreviewTextChanges(textInput);\n    setTempVariables(updatedVariables);\n    console.log(\"preview text:\" + textInput);\n    incomingHandleVariablesChanges(updatedVariables);\n  }\n\n  // function enableEditing(element) {\n  //   if (!element) return;\n  //   element.setAttribute(\"contenteditable\", true);\n  //   element.focus();\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        // contentEditable=\"true\"\n        className: \"w-full h-[100%] max-w-[80%] text-center flex overflow-auto bg-main-color justify-center text-opposite-color items-center border border-opposite-color cursor-text rounded-[10px] border-solid p-[10px]\" + tw_textInput_hover + tw_textInput_focus,\n        placeholder: \"Type Text here..\"\n        // onClick={(e) => enableEditing(e.target)}\n        ,\n        onChange: e => addVariableOnInput(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(TextInput, \"XgDGksITBk0AZXTs4ATeWGcjfGs=\");\n_c = TextInput;\nexport default TextInput;\n\n//  // contentEditable=\"true\"\n//     className={\n//       \" h-full bg-main-color place-content-center border border-opposite-color cursor-text rounded-[10px] border-solid\" +\n//       tw_textInput_hover +\n//       tw_textInput_focus +\n//       tw_textInput_md +\n//       tw_textInput_lg\n//     }\nvar _c;\n$RefreshReg$(_c, \"TextInput\");","map":{"version":3,"names":["useRef","useState","useEffect","use","css","jsxDEV","_jsxDEV","Fragment","_Fragment","TextInput","incomingHandlePreviewTextChanges","incomingHandleVariablesChanges","incomingVariables","_s","tw_textInput_md","tw_textInput_lg","tw_textInput_focus","tw_textInput_hover","tempVariables","setTempVariables","Map","addVariableOnInput","e","textInput","target","value","searchPos","allBracketPositions","length","bracketPos","indexOf","push","updatedVariables","forEach","position","index","has","set","id","name","type","minValue","maxValue","iterate","interval","randomize","displayText","console","log","children","className","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Elgratio/Documents/Learning/Front End - Web Dev/Projects/React App Test/my-app/src/components/text-input.js"],"sourcesContent":["import { useRef, useState, useEffect, use } from \"react\";\r\nimport css from \"./text-input.module.css\";\r\n\r\nfunction TextInput({\r\n  incomingHandlePreviewTextChanges,\r\n  incomingHandleVariablesChanges,\r\n  incomingVariables,\r\n}) {\r\n  //Tailwind Styles\r\n\r\n  //Text Input\r\n  let tw_textInput_md = \" md:w-[100%] md:p-[10px]\";\r\n  let tw_textInput_lg = \" lg:w-[50%]\";\r\n  let tw_textInput_focus =\r\n    \" focus:bg-opposite-color focus:text-main-color focus:border focus:border-main-color focus:border-solid\";\r\n  let tw_textInput_hover =\r\n    \" hover:bg-opposite-color hover:text-main-color hover:border hover:border-main-color hover:border-solid\";\r\n\r\n  const [tempVariables, setTempVariables] = useState(new Map());\r\n\r\n  function addVariableOnInput(e) {\r\n    const textInput = e.target.value;\r\n\r\n    // Search for {} in the text\r\n    let searchPos = 0;\r\n    let allBracketPositions = [];\r\n    while (searchPos < textInput.length) {\r\n      const bracketPos = textInput.indexOf(\"{}\", searchPos);\r\n      if (bracketPos === -1) break;\r\n      allBracketPositions.push(bracketPos);\r\n      searchPos = bracketPos + 1;\r\n    }\r\n    const updatedVariables = new Map(tempVariables);\r\n    allBracketPositions.forEach((position, index) => {\r\n      if (!updatedVariables.has(index)) {\r\n        updatedVariables.set(index, {\r\n          id: position,\r\n          name: \"Variable \" + index,\r\n          type: \"Integer\",\r\n          value: index,\r\n          minValue: index,\r\n          maxValue: 10,\r\n          iterate: true,\r\n          interval: 1,\r\n          randomize: false,\r\n          displayText: \"Display Text\", //now that i think of it, should this be put inside a temp variable?\r\n        });\r\n      }\r\n    });\r\n\r\n    console.log(\"preview text: before enter\" + textInput);\r\n    incomingHandlePreviewTextChanges(textInput);\r\n    setTempVariables(updatedVariables);\r\n    console.log(\"preview text:\" + textInput);\r\n    incomingHandleVariablesChanges(updatedVariables);\r\n  }\r\n\r\n\r\n\r\n  // function enableEditing(element) {\r\n  //   if (!element) return;\r\n  //   element.setAttribute(\"contenteditable\", true);\r\n  //   element.focus();\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-full h-full flex justify-center items-center\">\r\n        <input\r\n          // contentEditable=\"true\"\r\n          className={\r\n            \"w-full h-[100%] max-w-[80%] text-center flex overflow-auto bg-main-color justify-center text-opposite-color items-center border border-opposite-color cursor-text rounded-[10px] border-solid p-[10px]\" +\r\n            tw_textInput_hover +\r\n            tw_textInput_focus\r\n          }\r\n          placeholder=\"Type Text here..\"\r\n          // onClick={(e) => enableEditing(e.target)}\r\n          onChange={(e) => addVariableOnInput(e)}\r\n        ></input>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default TextInput;\r\n\r\n//  // contentEditable=\"true\"\r\n//     className={\r\n//       \" h-full bg-main-color place-content-center border border-opposite-color cursor-text rounded-[10px] border-solid\" +\r\n//       tw_textInput_hover +\r\n//       tw_textInput_focus +\r\n//       tw_textInput_md +\r\n//       tw_textInput_lg\r\n//     }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}